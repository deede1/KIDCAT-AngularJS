<script type="text/javascript">
    var __contextRoot = '@VersoMVC.Infrastructure.ConfigurationHelper.ContextPath';
</script>
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Public/Styles/style.css")" >
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Public/Styles/jquery.sortable.style.css")" >
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Public/Javascript/libs/Gridster/jquery.gridster.css")" >
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Public/Javascript/libs/multiselect/jquery-ui-1.8.18.css")" >

<script type="text/javascript" src="@Url.Content("~/Public/Javascript/libs/jquery-1.7.1.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/libs/jquery-ui-1.8.11.min.js")" ></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/KnockOut/knockout-2.1.0.debug.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/KnockOut/knockout.mapping-latest.js")" ></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/KnockOut/knockout-sortable.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/uxAdmin/uxAdmin.utilities.js")" ></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/libs/modernizr-2.5.3.min.js")" ></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/libs/jQuery.FileInput/jquery.fileinput.js")" ></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/libs/ckeditor/ckeditor.js")" ></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/libs/ckeditor/config.js")" ></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/libs/Gridster/jquery.gridster.js")" ></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/uxAdmin/jquery.ui.touch-punch.min.js")" ></script>
<script type="text/javascript" src="@Url.Content("~/Public/Javascript/libs/jQuery-ui-tab-utils.js")" ></script>

<style type="text/css">
    html {padding:0px; margin:0px;}
    body {padding:0px; margin:0px; position:relative;}
    
    /* iframe form styles */
    body > form .title {border-bottom:1px solid #BBBBBB; margin-bottom:10px;}
    body > form .title h3 {display:inline-block; width:auto; height:14px; padding:6px 10px; margin:0px; border:1px solid #BBBBBB; border-bottom:none; text-align:center; vertical-align:middle; line-height:1; font-size:13px;}
    body > form .title .actions {width:auto; float:right;}
</style>

<form id="PageManagerForm" method="post" action="" style="display:block;">

    <div class="title full-width">
        <h3>Page Manager</h3>
        <div class="actions">
            <input type="button" class="button primary" value="Create Page"  />           
            <input type="button" class="button" value="Help" />
        </div>
    </div>

    <div class="content">
        <div class="fields">
            <div  class="row">
                   <p class="cell w-12-12" style="font-size: 15px; font-weight: bold"><label>Page List</label><br/></p>
            </div>
       
           
            <div class="row">            
                <div id="PageTemplateTabs" style="width: 98.8%; float: left;">
                    <ul>
                        <li><a href="#LocalPages">Local Pages</a></li>
                        <li><a href="#GlobalPages">Global Pages</a></li>            
                    </ul>
                    <div id="LocalPages">
                        <div class="row">                       
                            <div class="cell w-12-12" style="width:100%;">
                                <div  class="row">
                                    <p class="cell w-12-12"><label>Pages can be dragged up or down in the list to change the sequence of display.</label><br/></p>
                                </div>
                                                               
                                <ul class="list2 widgets2" >
                                    <li style="background-color:#D3E2F8; color:black ">
                                        <div style="width: 19px;" Data-bind="text: ' '"></div>   
                                        <div style="width: 19px;" Data-bind="text: ' '"></div>   
                                        <div style="width: 19px;" Data-bind="text: ' '"></div>                                  
                                        <span class="page-name" data-bind="text: 'Page Name'" style="font-weight:bold; width: 200px; "></span>   
                                        <span class="page-name" data-bind="text: '&nbsp;&nbsp;Page Type'" style="font-weight:bold; width: 200px"></span>                              
                                        <span class="page-name" data-bind="text: '&nbsp;&nbsp;Page Level'" style="font-weight:bold; width: 200px"></span>
                                        <span class="page-name" data-bind="text: '&nbsp;&nbsp;Global Owner'" style="font-weight:bold; width: 200px"></span>     
                                    </li>
                                </ul>

                                <ul class="list2 widgets2" data-bind="sortable: {data: PageTypesList, afterMove: $root.savePageOrderData, options: { cancel: '.no-sort'}}">                    
                                    <li data-bind="css: { 'no-sort': Key == 'SystemPage'}" style="background-color:#D3E2F8; color:black ">
                                        <div class="icon blank" Data-bind="visible:!$data.CanDelete"></div>
                                        <a class="icon delete" title="Delete" data-bind="visible: $data.CanDelete, click:$root.deletePage"></a>
                                        <a class="icon edit" title="Edit" data-bind="visible: $data.CanEdit, click:$root.editLocalPage"></a>
                                        <div class="icon blank" Data-bind="visible:!$data.CanEdit"></div>
                                        <input type="checkbox"  title="Use Global" data-bind="visible:$data.IsGlobal,  event: { change: $root.updateGlobal }, checked: $data.UseGlobal, enable: !$data.ForceGlobal" />
                                        <div class="icon blank" Data-bind="visible:!$data.IsGlobal"></div>
                                        <div class="page-name" data-bind="text: Name" style="width: 200px;color:black "></div>
                                        <span class="page-type" data-bind="text: WType" style="width: 200px;color:black "></span>                              
                                        <span class="page-name" data-bind="html:$root.IsLocalGlobal($data)" style="width: 200px;color:black "></span>
                                        <span class="page-name" data-bind="text: OwnerLibraryName" style="width: 200px ;color:black "></span>                        
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div id="GlobalPages">
                       <div class="row">                       
                           <span class="cell w-12-12" style="width:100%;">
                               
                               
                                                              
                               <ul class="list widgets" >
                                   <li style="background-color:#F6CEF5; color:black ">                                        
                                       <div style="width: 19px;" Data-bind="text: ' '"></div>   
                                       <div style="width: 19px;" Data-bind="text: ' '"></div>                                  
                                       <span class="page-name" data-bind="text: 'Page Name', click: SortByHeaderName" style="font-weight:bold; width: 100px; cursor: pointer "></span><span class="name sort-icon" data-bind="click: SortByHeaderName"></span>   
                                       <span class="page-name" data-bind="text: '&nbsp;&nbsp;Page Type', click: SortByHeaderWType" style="font-weight:bold; width: 100px;cursor: pointer"></span>   <span class="name sort-icon" data-bind="click: SortByHeaderWType"></span>                                                                      
                                       <span class="page-name" data-bind="text: '&nbsp;&nbsp;Global Owner', click: SortByHeaderOwnerLibraryName" style="font-weight:bold; width: 100px;cursor: pointer"></span>    <span class="name sort-icon" data-bind="click: SortByHeaderOwnerLibraryName"></span>    
                                       <span class="page-name" data-bind="text: '&nbsp;&nbsp;Use Count', click: SortByHeaderUseCount" style="font-weight:bold; width: 100px;cursor: pointer"></span>     <span class="name sort-icon" data-bind="click: SortByHeaderUseCount"></span>   
                                   </li>
                               </ul>
                               @*<ul class="list2 widgets2">
                                    <li style="background-color:#F6CEF5; color:black ">
                                        <div style="width: 19px;" Data-bind="text: ' '"></div>   
                                        <div style="width: 19px;" Data-bind="text: ' '"></div>  
                                        <!-- ko foreach: SortByOption-->
                                        <span class="page-name" data-bind="text: title, click: $root.SortByHeader" style="font-weight:bold; width: 200px; "></span>   
                                        <!-- /ko -->
                                    </li>
                                </ul>*@
                               @*<ul class="list2 widgets2" data-bind="sortable: {data: GlobalPageTypesList, afterMove: $root.savePageOrderData, options: { cancel: '.no-sort'}}">      *@
                               <ul class="list2 widgets2" data-bind="foreach: GlobalPageTypesList">    
                                   <li data-bind="css: { 'no-sort': Key == 'SystemPage'}" style="background-color:#F6CEF5; color:black ">                                        
                                       <a class="icon delete" title="Delete" data-bind=" click:$root.deleteGlobalPage"></a>
                                       <a class="icon edit" title="Edit" data-bind=" click:$root.editGlogalPage"></a>                                                                                
                                       <span class="page-name" data-bind="text: Name, attr:{'class' : $root.boldPageNameSort() ? 'page-name-active':'page-name'}" style="width: 255px;color:black "></span>
                                       <span class="page-name" data-bind="text: WType, attr:{'class' : $root.boldPageTypeSort() ? 'page-name-active':'page-name'}" style="width: 260px;color:black "></span>                                                                      
                                       <span class="page-name" data-bind="text: OwnerLibraryName, attr:{'class' : $root.boldGlobalOwnerSort() ? 'page-name-active':'page-name'}" style="width: 260px ;color:black "></span>                        
                                       <span class="page-name" data-bind="text: UseCount, attr:{'class' : $root.boldUseCountSort() ? 'page-name-active':'page-name'}" style="width: 100px ;color:black "></span>    
                                   </li>
                               </ul>
                           </div>
                        </div>                      
                    </div>
                </div>            
            </div>   

            
            <!-- row 2 -->
            <div class="row">
                <hr />
            </div>
        </div>
    </div>
</form>

<script type="text/javascript">
    ko.bindingHandlers.sortableList = {
        init: function (element, valueAccessor) {
            var list = valueAccessor();
            $(element).sortable({
                update: function (event, ui) {
                    var item = ui.item.tmplItem().data;
                    var position = ko.utils.arrayIndexOf(ui.item.parent().children(), ui.item[0]);
                    if (position >= 0) { list.remove(item); list.splice(position, 0, item);}
                }
            });
        }
    };

    uxAdmin.PageManager = (function () {
        var view = $('#PageManagerForm');
        var body = $('#wgt');
        var formButtons = {};
        var vm;
        var module;

        function sortingModule(obj, sortByColumnName, acsDec) {
            var abc = String(sortByColumnName);
            obj.sort(function (a, b) {
                var tempA = eval("a." + abc);
                var tempB = eval("b." + abc);
                //console.log(tempA);
                var nameA = isNaN(tempA) ? tempA.toLowerCase() : tempA;
                var nameB = isNaN(tempB) ? tempB.toLowerCase() : tempB;
                if (nameA < nameB) //sort string ascending
                    return -1;

                if (nameA > nameB)
                    return 1;
                return 0; //default return value (no sorting)
            });
            if (acsDec) {
                return obj;
            } else {
                return obj.reverse();
            }

        }

        var pageManagerPageVm = function () {
            var self = this;
            self.PageTypesList = ko.observableArray([]);
            self.GlobalPageTypesList = ko.observableArray([]);
            self.isPageNameSort = ko.observable(true);
            self.isPageTypeSort = ko.observable(true);
            self.isGlobalOwnerSort = ko.observable(true);
            self.isUseCountSort = ko.observable(true);
            //            self.TempGlobalPageTypesList = ko.observableArray([]);
            //            self.GlobalPageTypesList = ko.dependentObservable(function () {
            //                var sKey = "";
            //                return ko.utils.arrayFilter(self.TempGlobalPageTypesList(), function (register) {
            //                    return register.Name.toLowerCase().indexOf(sKey) >= 0;
            //                });
            //            });
            //            self.HeaderSorting = function (data) {
            //                //console.log(data);
            //                self.TempGlobalPageTypesList.sort(function (a, b) {
            //                    return eval("a." + data + " < b." + data + " ? -1 : a." + data + " > b." + data + " ? 1 : a." + data + " == b." + data + " ? 0 : 0");
            //                });
            //};   
            self.SortByOption = [
                { title: 'Page Name', sortKey: 'Name' },
                { title: 'Page Type', sortKey: 'WType' },
                { title: 'Global Owner', sortKey: 'OwnerLibraryName' },
                { title: 'Use Count', sortKey: 'UseCount' }
            ];
            self.isPageNameSort = ko.observable(true);
            self.isPageTypeSort = ko.observable(true);
            self.isGlobalOwnerSort = ko.observable(true);
            self.isUseCountSort = ko.observable(true);

            self.boldPageNameSort = ko.observable(false);
            self.boldPageTypeSort = ko.observable(false);
            self.boldGlobalOwnerSort = ko.observable(false);
            self.boldUseCountSort = ko.observable(false);
            var updateColumnClass = function (col) {
                self.boldPageNameSort(false); self.boldPageTypeSort(false); self.boldGlobalOwnerSort(false); self.boldUseCountSort(false);
                if (col == "Name") { self.boldPageNameSort(true); }
                if (col == "WType") { self.boldPageTypeSort(true); }
                if (col == "OwnerLibraryName") { self.boldGlobalOwnerSort(true); }
                if (col == "UseCount") { self.boldUseCountSort(true); }
            };
            self.SortByHeaderName = function () {
                //console.log("Name");
                updateColumnClass("Name");
                var $modules = self.GlobalPageTypesList();
                if (self.isPageNameSort()) {
                    self.isPageNameSort(false);
                    self.GlobalPageTypesList(sortingModule($modules, "Name", false));
                    $('.list.widgets li .sort-icon.name').addClass('up');
                } else {
                    self.isPageNameSort(true);
                    self.GlobalPageTypesList(sortingModule($modules, "Name", true));
                    $('.list.widgets li .sort-icon.name').removeClass('up');
                }

            };
            self.SortByHeaderWType = function () {
                //console.log("WType");
                updateColumnClass("WType");
                var $modules = self.GlobalPageTypesList();
                if (self.isPageTypeSort()) {
                    self.isPageTypeSort(false);
                    self.GlobalPageTypesList(sortingModule($modules, "WType", false));
                    $('.list.widgets li .sort-icon.name').addClass('up');
                } else {
                    self.isPageTypeSort(true);
                    self.GlobalPageTypesList(sortingModule($modules, "WType", true));
                    $('.list.widgets li .sort-icon.name').removeClass('up');
                }
            };
            self.SortByHeaderOwnerLibraryName = function () {
                //console.log("OwnerLibraryName");
                updateColumnClass("OwnerLibraryName");
                var $modules = self.GlobalPageTypesList();
                if (self.isGlobalOwnerSort()) {
                    self.isGlobalOwnerSort(false);
                    self.GlobalPageTypesList(sortingModule($modules, "OwnerLibraryName", false));
                    $('.list.widgets li .sort-icon.name').addClass('up');
                } else {
                    self.isGlobalOwnerSort(true);
                    self.GlobalPageTypesList(sortingModule($modules, "OwnerLibraryName", true));
                    $('.list.widgets li .sort-icon.name').removeClass('up');
                }
            };
            self.SortByHeaderUseCount = function () {
                //console.log("UseCount");
                updateColumnClass("UseCount");
                var $modules = self.GlobalPageTypesList();
                if (self.isUseCountSort()) {
                    self.isUseCountSort(false);
                    self.GlobalPageTypesList(sortingModule($modules, "UseCount", false));
                    $('.list.widgets li .sort-icon.name').addClass('up');
                } else {
                    self.isUseCountSort(true);
                    self.GlobalPageTypesList(sortingModule($modules, "UseCount", true));
                    $('.list.widgets li .sort-icon.name').removeClass('up');
                }
            };
            /*
            self.SortByHeader = function (){
            //console.log(data);
            //                self.GlobalPageTypesList.sort(function (a, b) {
            //                    return eval("a." + data + " < b." + data + " ? -1 : a." + data + " > b." + data + " ? 1 : a." + data + " == b." + data + " ? 0 : 0");
            //                });
            };*/
            self.selectedType = ko.observable();
            self.IsCustomertSuperUser = ko.observable();
            self.updateGlobal = function (data, event) {
                uxAdmin.utilities.ajaxPostJson("PageManager/UpdateUserGlobal", { 'Index': data.Index, 'UseGlobal': $(event.target).is(':checked') }, function (result) {
                    if (!result.Status) {
                        alert(result.Message);
                        PageTypesList(result.PageList);
                    }
                });
            };
            self.showDeleteButton = function (data) {
                return data.Key == "SystemPage" ? false : data.OwnerLPK;
            };

            self.IsLocalGlobal = function (data) {
                var globalId = data.Index.split('|')[0];
                var localId = data.Index.split('|')[1];
                var displayText = "";
                if (localId > 0) {
                    displayText += "LOCAL ";
                }
                if ((localId > 0) && (globalId > 0)) {
                    displayText += " and ";
                }
                if (globalId > 0) {
                    displayText += "GLOBAL ";
                }
                return displayText + "PAGE";
            };
            self.deletePage = function (page) {
                if (confirm("Are you sure you want to delete this Local Page")) {
                    self.PageTypesList.remove(page);
                    uxAdmin.utilities.ajaxPostJson("PageManager/DeletePage", page, function () { body.hide(); });
                }
            };
            self.deleteGlobalPage = function (page) {
                if (confirm("Are you sure you want to delete this Global Page")) {
                    self.GlobalPageTypesList.remove(page);
                    uxAdmin.utilities.ajaxPostJson("PageManager/DeleteGlobalPage", page, function () { body.hide(); });
                }
            };
            self.editLocalPage = function (page) {
                window.parent.ModifiyManagerIframeUrl("Page", page.Index.replace('|', '~'), false);
            };
            self.editGlogalPage = function (page) {
                window.parent.ModifiyManagerIframeUrl("Page", page.Index.split('|')[0], true);
            };
            self.savePageOrderData = function (orderEvt) {
                var myCollectionData = new pageJsonCollector("", ko.toJSON(orderEvt.sourceParent));
                uxAdmin.utilities.ajaxPostJson("PageManager/UpdatePageOrder", myCollectionData, function () { });
            };
            self.saveGlobalPageOrderData = function (orderEvt) {
                //console.log(orderEvt);
            };
        };
        var pageJsonCollector = function (pageId, jsonData) {
            var self = this;
            self.JsonData = jsonData;
            self.PageId = pageId;
        };
        var createPage = function () {
            var url = '@Url.Content("~/SystemSettings/PageManager/CreatePage")';
            window.location.href = url;
        };

        var help = function () {
            //launch help            
            alert("help");
        };
        var getFormButtonsReferences = function () {
            formButtons = {
                Create: view.find('.actions .button[value="Create Page"]'),
                Help: view.find('.actions .button[value="Help"]')
            };
        };
        var initFormButtonsBindings = function () {
            formButtons.Create.bind('click', createPage);
            formButtons.Help.bind('click', help);
        };
        var init = function () {
            view.find('.actions .button[value="Save"]').hide();
            view.find('.actions .button[value="Cancel"]').hide();
            $("#PageTemplateTabs").tabs({
                select: function (event, ui) { $("#wgt").children().remove(); },
                show: function (event, ui) {
                    var lastOpenedPanel = $(this).data("lastOpenedPanel");
                    if (!$(this).data("topPositionTab")) { $(this).data("topPositionTab", $(ui.panel).position().top); };
                    $(ui.panel).hide().fadeIn();
                    if (lastOpenedPanel) { lastOpenedPanel.toggleClass("ui-tabs-hide").css("position", "absolute").css("top", $(this).data("topPositionTab") + "px").fadeOut(500, function () { $(this).css("position", ""); }); }
                    $(this).data("lastOpenedPanel", $(ui.panel));
                }
            });
            vm = new pageManagerPageVm();
            uxAdmin.utilities.ajaxGetJson('PageManager/GetPageList/', null, function (data) {
                var jsondata = ko.toJS(data);
                vm.PageTypesList(jsondata.PageList);
                vm.GlobalPageTypesList(jsondata.GlobalPages);
                vm.IsCustomertSuperUser(jsondata.ShowGlobalTab);
                $("#PageTemplateTabs").tabs();
                if (!jsondata.ShowGlobalTab) { $("#PageTemplateTabs").disableTab(1, true); }
            });
            ko.bindingHandlers.sortable.afterMove = vm.savePageOrderData;
            ko.applyBindings(vm);
            getFormButtonsReferences();
            initFormButtonsBindings();
        };

        return {
            Init: init,
            createPage: createPage,
            PageManagerPageVm: pageManagerPageVm
        };
    })();

    uxAdmin.PageManager.Init();
</script>
